{"version":3,"sources":["stateContainers/Modal.module.css","uiComponents/TaskList.module.css","context/AppContext.js","stateContainers/Modal.js","uiComponents/SortOrder.js","stateContainers/EditDelete.js","uiComponents/TaskList.js","uiComponents/Layout.js","App.js","index.js"],"names":["module","exports","AppContext","createContext","taskList","isModalOpen","addTask","toggleModal","displayPriority","AppContextProvider","props","tempTasks","sessionStorage","getItem","initTasks","JSON","parse","useState","tasks","setTasks","isOpen","setIsOpen","sortedBy","setSortedBy","addNewTask","newTask","prevState","updatedTaskList","priority","setItem","stringify","removeTask","index","slice","concat","length","Provider","value","changeSortOrder","newSortOrder","editTask","name","newPriority","prevPriority","deleteTask","children","Modal","setNewTask","setNewPriority","appContext","useContext","btnContent","type","onClick","e","preventDefault","submit","indx","cancel","className","classes","modalContainer","id","onChange","target","placeholder","SortOrder","EditDelete","showInput","setInput","content","showModal","bool","TaskList","sortOrder","highPriorityTasks","map","item","i","key","mediumPriorityTasks","lowPriorityTasks","sortedListItems","Layout","modalContent","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c0d48a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__3YE2S\",\"modalContainer\":\"Modal_modalContainer__2zbg_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"TaskList_TaskList__25TKG\"};","import React, { createContext, useState } from 'react';\n\n// sets defaults, but will also initialize below\nexport const AppContext = createContext({\n  // taskList[0] - highest priority,\n  // taskList[1] - medium priority,\n  // taskList[2] - lowest priority,\n  taskList: [[], [], []],\n  isModalOpen: false,\n  addTask: () => {},\n  toggleModal: () => {},\n  displayPriority: 'high'\n});\n\nconst AppContextProvider = props => {\n  const tempTasks = sessionStorage.getItem('taskList');\n\n  let initTasks = [[], [], []];\n  if (tempTasks) {\n    initTasks = JSON.parse(tempTasks);\n  }\n\n  // React Hook useState to mimic State in functional components\n  const [tasks, setTasks] = useState(initTasks);\n  const [isOpen, setIsOpen] = useState(false);\n  const [sortedBy, setSortedBy] = useState('high');\n\n  const addNewTask = newTask => {\n    // taskList[0] - highest priority,\n    // taskList[1] - medium priority,\n    // taskList[2] - lowest priority,\n    setTasks(prevState => {\n      let updatedTaskList = [...prevState];\n      switch (newTask.priority) {\n        case 'high':\n          updatedTaskList[0] = [...updatedTaskList[0], newTask.newTask];\n          break;\n        case 'medium':\n        case 'default':\n          updatedTaskList[1] = [...updatedTaskList[1], newTask.newTask];\n          break;\n        case 'low':\n          updatedTaskList[2] = [...updatedTaskList[2], newTask.newTask];\n          break;\n        default:\n          return updatedTaskList;\n      }\n      sessionStorage.setItem('taskList', JSON.stringify(updatedTaskList));\n      return updatedTaskList;\n    });\n  };\n\n  const toggleOpenModal = () => setIsOpen(!isOpen);\n  const updateSortOrder = newSortOrder => setSortedBy(newSortOrder);\n\n  const updateTask = (name, index, newPriority, prevPriority) => {\n    setTasks(prevState => {\n      removeTask(index, prevPriority);\n      addNewTask({ newTask: name, priority: newPriority });\n    });\n  };\n\n  const removeTask = (index, priority) => {\n    setTasks(prevState => {\n      let updatedTaskList = [...prevState];\n      switch (priority) {\n        case 'high':\n          updatedTaskList[0] = [...updatedTaskList[0]];\n          updatedTaskList[0] = updatedTaskList[0]\n            .slice(0, index)\n            .concat(\n              updatedTaskList[0].slice(index + 1, updatedTaskList[0].length)\n            );\n          break;\n        case 'medium':\n          updatedTaskList[1] = [...updatedTaskList[1]];\n          updatedTaskList[1] = updatedTaskList[1]\n            .slice(0, index)\n            .concat(\n              updatedTaskList[1].slice(index + 1, updatedTaskList[1].length)\n            );\n          break;\n        case 'low':\n          updatedTaskList[2] = [...updatedTaskList[2]];\n          updatedTaskList[2] = updatedTaskList[2]\n            .slice(0, index)\n            .concat(\n              updatedTaskList[2].slice(index + 1, updatedTaskList[2].length)\n            );\n          break;\n        default:\n          return updatedTaskList;\n      }\n      sessionStorage.setItem('taskList', JSON.stringify(updatedTaskList));\n      return updatedTaskList;\n    });\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        taskList: tasks,\n        isModalOpen: isOpen,\n        addTask: addNewTask,\n        toggleModal: toggleOpenModal,\n        displayPriority: sortedBy,\n        changeSortOrder: updateSortOrder,\n        editTask: updateTask,\n        deleteTask: removeTask\n      }}>\n      {props.children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContextProvider;\n","import React, { useState, useContext } from 'react';\nimport classes from './Modal.module.css';\nimport { AppContext } from '../context/AppContext';\n\nconst Modal = props => {\n  // TODO: setup submitHandler to update task list within Context/store\n\n  // commented out, moving state management to AppContext\n  // const submitHandler = (event, task) => {\n  //   event.preventDefault();\n  // };\n  const [newTask, setNewTask] = useState('');\n  const [priority, setNewPriority] = useState('default');\n\n  // state management via AppContext\n  const appContext = useContext(AppContext);\n\n  let btnContent = (\n    <button\n      type='submit'\n      onClick={e => {\n        e.preventDefault();\n        props.submit({ newTask, priority });\n        appContext.toggleModal();\n      }}>\n      Submit\n    </button>\n  );\n\n  if (props.priority) {\n    btnContent = (\n      <>\n        <button\n          onClick={e => {\n            e.preventDefault();\n            priority !== 'default'\n              ? appContext.editTask(\n                  newTask,\n                  props.indx,\n                  priority,\n                  props.priority\n                )\n              : appContext.editTask(\n                  newTask,\n                  props.indx,\n                  props.priority,\n                  props.priority\n                );\n          }}>\n          Save\n        </button>\n        <button\n          onClick={e => {\n            e.preventDefault();\n            props.cancel(false);\n          }}>\n          Cancel\n        </button>\n      </>\n    );\n  }\n\n  // TODO: add input field validation,\n  // possibly create custom <Input /> component for all inputs\n  return (\n    <div className={classes.Modal}>\n      <div className={classes.modalContainer}>\n        <div>\n          <input\n            type='text'\n            id='task'\n            name='task'\n            value={newTask}\n            onChange={e => setNewTask(e.target.value)}\n            placeholder='Task Name'\n          />\n          <select\n            value={priority}\n            onChange={e => {\n              setNewPriority(e.target.value);\n            }}>\n            <option value='default'>Select Priority</option>\n            <option value='low'>Low</option>\n            <option value='medium'>Medium</option>\n            <option value='high'>High</option>\n          </select>\n          {btnContent}\n        </div>\n        <div>(default priority: medium)</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\n\nconst SortOrder = props => {\n  const appContext = useContext(AppContext);\n\n  return (\n    <label>\n      Sort by:\n      <select\n        value={appContext.displayPriority}\n        onChange={e => {\n          appContext.changeSortOrder(e.target.value);\n        }}>\n        <option value='low'>Lowest First</option>\n        <option value='mediumHighLow'>Medium > High > Low</option>\n        <option value='mediumLowHigh'>Medium > Low > High</option>\n        <option value='high'>Highest First</option>\n      </select>\n    </label>\n  );\n};\n\nexport default SortOrder;\n","import React, { useState, useContext } from 'react';\nimport Modal from '../stateContainers/Modal';\nimport { AppContext } from '../context/AppContext';\n\nconst EditDelete = props => {\n  const [showInput, setInput] = useState(false);\n  const appContext = useContext(AppContext);\n\n  let content = (\n    <form>\n      <button\n        onClick={e => {\n          e.preventDefault();\n          setInput(true);\n        }}>\n        edit\n      </button>\n      <button\n        onClick={e => {\n          e.preventDefault();\n          appContext.deleteTask(props.indx, props.priority);\n        }}>\n        delete\n      </button>\n    </form>\n  );\n\n  if (showInput) {\n    content = (\n      <form>\n        <Modal\n          indx={props.indx}\n          priority={props.priority}\n          showModal={showInput}\n          cancel={bool => setInput(bool)}\n        />\n      </form>\n    );\n  }\n\n  return <>{content}</>;\n};\n\nexport default EditDelete;\n","import React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport SortOrder from '../uiComponents/SortOrder';\nimport EditDelete from '../stateContainers/EditDelete';\nimport classes from './TaskList.module.css';\n\nconst TaskList = props => {\n  // move test tasks to AppContext\n  // const taskListTmp = [[<li key='0'>'abc'</li>], [<li key='1'>'cde'</li>], []];\n\n  // access taskList hard-coded test data from AppContext\n  const appContext = useContext(AppContext);\n\n  // get sort order from AppContext and use below switch to .concat() arrays\n  // in the order specified\n  const sortOrder = appContext.displayPriority;\n\n  // TODO: outsource creation of <li> list items into\n  // a separate component\n  // e.g. <TaskListItems list={appContext.taskList[0]} priority={0}/>\n  const highPriorityTasks = appContext.taskList[0].map((item, i) => (\n    <li key={'high' + i}>\n      {item}\n      <EditDelete name={item} indx={i} priority='high' />\n    </li>\n  ));\n  const mediumPriorityTasks = appContext.taskList[1].map((item, i) => (\n    <li key={'medium' + i}>\n      {item}\n      <EditDelete name={item} indx={i} priority='medium' />\n    </li>\n  ));\n  const lowPriorityTasks = appContext.taskList[2].map((item, i) => (\n    <li key={'low' + i}>\n      {item}\n      <EditDelete name={item} indx={i} priority='low' />\n    </li>\n  ));\n\n  let sortedListItems = [];\n  switch (sortOrder) {\n    case 'mediumHighLow':\n      sortedListItems = mediumPriorityTasks\n        .concat(highPriorityTasks)\n        .concat(lowPriorityTasks);\n      break;\n    case 'mediumLowHigh':\n      sortedListItems = mediumPriorityTasks\n        .concat(lowPriorityTasks)\n        .concat(highPriorityTasks);\n      break;\n    case 'low':\n      sortedListItems = lowPriorityTasks\n        .concat(mediumPriorityTasks)\n        .concat(highPriorityTasks);\n      break;\n    default:\n      sortedListItems = highPriorityTasks\n        .concat(mediumPriorityTasks)\n        .concat(lowPriorityTasks);\n  }\n\n  return (\n    <div className={classes.TaskList}>\n      <SortOrder />\n      <ul>{sortedListItems}</ul>\n      <button onClick={appContext.toggleModal}>Add New Task</button>\n    </div>\n  );\n};\n\nexport default TaskList;\n","import React, { useContext } from 'react';\nimport Modal from '../stateContainers/Modal';\nimport TaskList from '../uiComponents/TaskList';\nimport { AppContext } from '../context/AppContext';\n\nconst Layout = props => {\n  // using AppContext, pass the function to the Modal\n  // component that will add a newTask to the AppContext/State\n  const appContext = useContext(AppContext);\n  let modalContent = appContext.isModalOpen ? (\n    <Modal\n      submit={newTask => {\n        appContext.addTask(newTask);\n      }}\n    />\n  ) : (\n    ''\n  );\n\n  return (\n    <div>\n      {modalContent}\n      <TaskList />\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport Layout from './uiComponents/Layout';\nimport classes from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={classes.App}>\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AppContextProvider from './context/AppContext';\n\nReactDOM.render(\n  <AppContextProvider>\n    <App />\n  </AppContextProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}